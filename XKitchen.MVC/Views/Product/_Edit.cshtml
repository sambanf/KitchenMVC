@model XKitchen.ViewModel.ProductViewModel

@using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { id = "edit-form", name = "edit-form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProductViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.categoryid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.categoryid,(IEnumerable<SelectListItem>)
                     ViewBag.Categorylist, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.categoryid, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.initial, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.initial, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.initial, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div class=" btn-group btn-group-sm">
                    <input type="button" value="Cancel" class="btn btn-default btn-sm" data-dismiss="modal" />
                    <input type="submit" value="Save Changes" class="btn btn-primary btn-sm" />
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    $("#edit-form").submit(function () {
        //alert($(this).serialize());
        $.ajax({
            url: '@Url.Action("Edit","Product")', type: this.method,
            data: $(this).serialize(),
            success: function (result) {
                if (result.success) {
                    alert("Save Successful " + result.entity.initial);
                    $(".modal").modal("hide");
                    GetList();
                } else {
                    alert("Error!." + result.message)
                }
            }
        });
        return false;
    });
</script>
